// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: menu/v2/menu_api.proto

package menu

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _menu_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MenusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenusRequestMultiError, or
// nil if none found.
func (m *MenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MenusRequestMultiError(errors)
	}
	return nil
}

// MenusRequestMultiError is an error wrapping multiple validation errors
// returned by MenusRequest.ValidateAll() if the designated constraints aren't met.
type MenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenusRequestMultiError) AllErrors() []error { return m }

// MenusRequestValidationError is the validation error returned by
// MenusRequest.Validate if the designated constraints aren't met.
type MenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenusRequestValidationError) ErrorName() string { return "MenusRequestValidationError" }

// Error satisfies the builtin error interface
func (e MenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenusRequestValidationError{}

// Validate checks the field values on MenusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenusResponseMultiError, or
// nil if none found.
func (m *MenusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenusResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenusResponseValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenusResponseValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MenusResponseMultiError(errors)
	}
	return nil
}

// MenusResponseMultiError is an error wrapping multiple validation errors
// returned by MenusResponse.ValidateAll() if the designated constraints
// aren't met.
type MenusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenusResponseMultiError) AllErrors() []error { return m }

// MenusResponseValidationError is the validation error returned by
// MenusResponse.Validate if the designated constraints aren't met.
type MenusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenusResponseValidationError) ErrorName() string { return "MenusResponseValidationError" }

// Error satisfies the builtin error interface
func (e MenusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenusResponseValidationError{}

// Validate checks the field values on MenuDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MenuDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuDetailsRequestMultiError, or nil if none found.
func (m *MenuDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMenuId()); err != nil {
		err = MenuDetailsRequestValidationError{
			field:  "MenuId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MenuDetailsRequestMultiError(errors)
	}
	return nil
}

func (m *MenuDetailsRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MenuDetailsRequestMultiError is an error wrapping multiple validation errors
// returned by MenuDetailsRequest.ValidateAll() if the designated constraints
// aren't met.
type MenuDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDetailsRequestMultiError) AllErrors() []error { return m }

// MenuDetailsRequestValidationError is the validation error returned by
// MenuDetailsRequest.Validate if the designated constraints aren't met.
type MenuDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDetailsRequestValidationError) ErrorName() string {
	return "MenuDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MenuDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDetailsRequestValidationError{}

// Validate checks the field values on MenuDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MenuDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuDetailsResponseMultiError, or nil if none found.
func (m *MenuDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MenuDetailsResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MenuDetailsResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MenuDetailsResponseValidationError{
				field:  "Menu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MenuDetailsResponseMultiError(errors)
	}
	return nil
}

// MenuDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by MenuDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type MenuDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuDetailsResponseMultiError) AllErrors() []error { return m }

// MenuDetailsResponseValidationError is the validation error returned by
// MenuDetailsResponse.Validate if the designated constraints aren't met.
type MenuDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuDetailsResponseValidationError) ErrorName() string {
	return "MenuDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MenuDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuDetailsResponseValidationError{}

// Validate checks the field values on CreateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuRequestMultiError, or nil if none found.
func (m *CreateMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := CreateMenuRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCountryId()); err != nil {
		err = CreateMenuRequestValidationError{
			field:  "CountryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = CreateMenuRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetLogoId()); err != nil {
		err = CreateMenuRequestValidationError{
			field:  "LogoId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetStatusId()); err != nil {
		err = CreateMenuRequestValidationError{
			field:  "StatusId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMenuRequestMultiError(errors)
	}
	return nil
}

func (m *CreateMenuRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateMenuRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuRequestMultiError) AllErrors() []error { return m }

// CreateMenuRequestValidationError is the validation error returned by
// CreateMenuRequest.Validate if the designated constraints aren't met.
type CreateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRequestValidationError) ErrorName() string {
	return "CreateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRequestValidationError{}

// Validate checks the field values on CreateMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuResponseMultiError, or nil if none found.
func (m *CreateMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMenuResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMenuResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMenuResponseValidationError{
				field:  "Menu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMenuResponseMultiError(errors)
	}
	return nil
}

// CreateMenuResponseMultiError is an error wrapping multiple validation errors
// returned by CreateMenuResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuResponseMultiError) AllErrors() []error { return m }

// CreateMenuResponseValidationError is the validation error returned by
// CreateMenuResponse.Validate if the designated constraints aren't met.
type CreateMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuResponseValidationError) ErrorName() string {
	return "CreateMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuResponseValidationError{}

// Validate checks the field values on UpdateMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuRequestMultiError, or nil if none found.
func (m *UpdateMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMenuId()); err != nil {
		err = UpdateMenuRequestValidationError{
			field:  "MenuId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := UpdateMenuRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCountryId()); err != nil {
		err = UpdateMenuRequestValidationError{
			field:  "CountryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = UpdateMenuRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetLogoId()); err != nil {
		err = UpdateMenuRequestValidationError{
			field:  "LogoId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetStatusId()); err != nil {
		err = UpdateMenuRequestValidationError{
			field:  "StatusId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateMenuRequestMultiError(errors)
	}
	return nil
}

func (m *UpdateMenuRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateMenuRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuRequestMultiError) AllErrors() []error { return m }

// UpdateMenuRequestValidationError is the validation error returned by
// UpdateMenuRequest.Validate if the designated constraints aren't met.
type UpdateMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRequestValidationError) ErrorName() string {
	return "UpdateMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRequestValidationError{}

// Validate checks the field values on UpdateMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuResponseMultiError, or nil if none found.
func (m *UpdateMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMenuResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMenuResponseValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMenuResponseValidationError{
				field:  "Menu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMenuResponseMultiError(errors)
	}
	return nil
}

// UpdateMenuResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuResponseMultiError) AllErrors() []error { return m }

// UpdateMenuResponseValidationError is the validation error returned by
// UpdateMenuResponse.Validate if the designated constraints aren't met.
type UpdateMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuResponseValidationError) ErrorName() string {
	return "UpdateMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuResponseValidationError{}

// Validate checks the field values on DeleteMenuRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuRequestMultiError, or nil if none found.
func (m *DeleteMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMenuId()); err != nil {
		err = DeleteMenuRequestValidationError{
			field:  "MenuId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMenuRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteMenuRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteMenuRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuRequestMultiError) AllErrors() []error { return m }

// DeleteMenuRequestValidationError is the validation error returned by
// DeleteMenuRequest.Validate if the designated constraints aren't met.
type DeleteMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRequestValidationError) ErrorName() string {
	return "DeleteMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRequestValidationError{}

// Validate checks the field values on DeleteMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuResponseMultiError, or nil if none found.
func (m *DeleteMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMenuResponseMultiError(errors)
	}
	return nil
}

// DeleteMenuResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuResponseMultiError) AllErrors() []error { return m }

// DeleteMenuResponseValidationError is the validation error returned by
// DeleteMenuResponse.Validate if the designated constraints aren't met.
type DeleteMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuResponseValidationError) ErrorName() string {
	return "DeleteMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuResponseValidationError{}

// Validate checks the field values on CategoriesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoriesRequestMultiError, or nil if none found.
func (m *CategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMenuId()); err != nil {
		err = CategoriesRequestValidationError{
			field:  "MenuId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoriesRequestMultiError(errors)
	}
	return nil
}

func (m *CategoriesRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CategoriesRequestMultiError is an error wrapping multiple validation errors
// returned by CategoriesRequest.ValidateAll() if the designated constraints
// aren't met.
type CategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesRequestMultiError) AllErrors() []error { return m }

// CategoriesRequestValidationError is the validation error returned by
// CategoriesRequest.Validate if the designated constraints aren't met.
type CategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesRequestValidationError) ErrorName() string {
	return "CategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesRequestValidationError{}

// Validate checks the field values on CategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoriesResponseMultiError, or nil if none found.
func (m *CategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoriesResponseMultiError(errors)
	}
	return nil
}

// CategoriesResponseMultiError is an error wrapping multiple validation errors
// returned by CategoriesResponse.ValidateAll() if the designated constraints
// aren't met.
type CategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesResponseMultiError) AllErrors() []error { return m }

// CategoriesResponseValidationError is the validation error returned by
// CategoriesResponse.Validate if the designated constraints aren't met.
type CategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesResponseValidationError) ErrorName() string {
	return "CategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesResponseValidationError{}

// Validate checks the field values on CategoryDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDetailsRequestMultiError, or nil if none found.
func (m *CategoryDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = CategoryDetailsRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryDetailsRequestMultiError(errors)
	}
	return nil
}

func (m *CategoryDetailsRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CategoryDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDetailsRequestMultiError) AllErrors() []error { return m }

// CategoryDetailsRequestValidationError is the validation error returned by
// CategoryDetailsRequest.Validate if the designated constraints aren't met.
type CategoryDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDetailsRequestValidationError) ErrorName() string {
	return "CategoryDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDetailsRequestValidationError{}

// Validate checks the field values on CategoryDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDetailsResponseMultiError, or nil if none found.
func (m *CategoryDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryDetailsResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryDetailsResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryDetailsResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryDetailsResponseMultiError(errors)
	}
	return nil
}

// CategoryDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDetailsResponseMultiError) AllErrors() []error { return m }

// CategoryDetailsResponseValidationError is the validation error returned by
// CategoryDetailsResponse.Validate if the designated constraints aren't met.
type CategoryDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDetailsResponseValidationError) ErrorName() string {
	return "CategoryDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDetailsResponseValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := CreateCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = CreateCategoryRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}
	return nil
}

func (m *CreateCategoryRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryResponseMultiError, or nil if none found.
func (m *CreateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryResponseMultiError(errors)
	}
	return nil
}

// CreateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateCategoryResponseValidationError is the validation error returned by
// CreateCategoryResponse.Validate if the designated constraints aren't met.
type CreateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryResponseValidationError) ErrorName() string {
	return "CreateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryResponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = UpdateCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := UpdateCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = UpdateCategoryRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}
	return nil
}

func (m *UpdateCategoryRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}
	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = DeleteCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteCategoryRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on DeleteCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryResponseMultiError, or nil if none found.
func (m *DeleteCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCategoryResponseMultiError(errors)
	}
	return nil
}

// DeleteCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryResponseMultiError) AllErrors() []error { return m }

// DeleteCategoryResponseValidationError is the validation error returned by
// DeleteCategoryResponse.Validate if the designated constraints aren't met.
type DeleteCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryResponseValidationError) ErrorName() string {
	return "DeleteCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryResponseValidationError{}

// Validate checks the field values on LinkCategoryMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkCategoryMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkCategoryMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkCategoryMenuRequestMultiError, or nil if none found.
func (m *LinkCategoryMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkCategoryMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = LinkCategoryMenuRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMenuId()); err != nil {
		err = LinkCategoryMenuRequestValidationError{
			field:  "MenuId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LinkCategoryMenuRequestMultiError(errors)
	}
	return nil
}

func (m *LinkCategoryMenuRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LinkCategoryMenuRequestMultiError is an error wrapping multiple validation
// errors returned by LinkCategoryMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type LinkCategoryMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkCategoryMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkCategoryMenuRequestMultiError) AllErrors() []error { return m }

// LinkCategoryMenuRequestValidationError is the validation error returned by
// LinkCategoryMenuRequest.Validate if the designated constraints aren't met.
type LinkCategoryMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkCategoryMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkCategoryMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkCategoryMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkCategoryMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkCategoryMenuRequestValidationError) ErrorName() string {
	return "LinkCategoryMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkCategoryMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkCategoryMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkCategoryMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkCategoryMenuRequestValidationError{}

// Validate checks the field values on LinkCategoryMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkCategoryMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkCategoryMenuResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkCategoryMenuResponseMultiError, or nil if none found.
func (m *LinkCategoryMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkCategoryMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LinkCategoryMenuResponseMultiError(errors)
	}
	return nil
}

// LinkCategoryMenuResponseMultiError is an error wrapping multiple validation
// errors returned by LinkCategoryMenuResponse.ValidateAll() if the designated
// constraints aren't met.
type LinkCategoryMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkCategoryMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkCategoryMenuResponseMultiError) AllErrors() []error { return m }

// LinkCategoryMenuResponseValidationError is the validation error returned by
// LinkCategoryMenuResponse.Validate if the designated constraints aren't met.
type LinkCategoryMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkCategoryMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkCategoryMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkCategoryMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkCategoryMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkCategoryMenuResponseValidationError) ErrorName() string {
	return "LinkCategoryMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkCategoryMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkCategoryMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkCategoryMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkCategoryMenuResponseValidationError{}

// Validate checks the field values on ProductsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductsRequestMultiError, or nil if none found.
func (m *ProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = ProductsRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductsRequestMultiError(errors)
	}
	return nil
}

func (m *ProductsRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProductsRequestMultiError is an error wrapping multiple validation errors
// returned by ProductsRequest.ValidateAll() if the designated constraints
// aren't met.
type ProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductsRequestMultiError) AllErrors() []error { return m }

// ProductsRequestValidationError is the validation error returned by
// ProductsRequest.Validate if the designated constraints aren't met.
type ProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsRequestValidationError) ErrorName() string { return "ProductsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsRequestValidationError{}

// Validate checks the field values on ProductsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductsResponseMultiError, or nil if none found.
func (m *ProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductsResponseMultiError(errors)
	}
	return nil
}

// ProductsResponseMultiError is an error wrapping multiple validation errors
// returned by ProductsResponse.ValidateAll() if the designated constraints
// aren't met.
type ProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductsResponseMultiError) AllErrors() []error { return m }

// ProductsResponseValidationError is the validation error returned by
// ProductsResponse.Validate if the designated constraints aren't met.
type ProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsResponseValidationError) ErrorName() string { return "ProductsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsResponseValidationError{}

// Validate checks the field values on ProductDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductDetailsRequestMultiError, or nil if none found.
func (m *ProductDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProductId()); err != nil {
		err = ProductDetailsRequestValidationError{
			field:  "ProductId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductDetailsRequestMultiError(errors)
	}
	return nil
}

func (m *ProductDetailsRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ProductDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by ProductDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type ProductDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductDetailsRequestMultiError) AllErrors() []error { return m }

// ProductDetailsRequestValidationError is the validation error returned by
// ProductDetailsRequest.Validate if the designated constraints aren't met.
type ProductDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailsRequestValidationError) ErrorName() string {
	return "ProductDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailsRequestValidationError{}

// Validate checks the field values on ProductDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductDetailsResponseMultiError, or nil if none found.
func (m *ProductDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductDetailsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductDetailsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductDetailsResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductDetailsResponseMultiError(errors)
	}
	return nil
}

// ProductDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by ProductDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProductDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductDetailsResponseMultiError) AllErrors() []error { return m }

// ProductDetailsResponseValidationError is the validation error returned by
// ProductDetailsResponse.Validate if the designated constraints aren't met.
type ProductDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDetailsResponseValidationError) ErrorName() string {
	return "ProductDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDetailsResponseValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := CreateProductRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if utf8.RuneCountInString(m.GetDescription()) > 255 {
			err := CreateProductRequestValidationError{
				field:  "Description",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Price

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = CreateProductRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}
	return nil
}

func (m *CreateProductRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}
	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductRequestMultiError, or nil if none found.
func (m *UpdateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProductId()); err != nil {
		err = UpdateProductRequestValidationError{
			field:  "ProductId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 55 {
		err := UpdateProductRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 55 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDescription() != "" {

		if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 255 {
			err := UpdateProductRequestValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Price

	if err := m._validateUuid(m.GetImageId()); err != nil {
		err = UpdateProductRequestValidationError{
			field:  "ImageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateProductRequestMultiError(errors)
	}
	return nil
}

func (m *UpdateProductRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateProductRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductRequestMultiError) AllErrors() []error { return m }

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductResponseMultiError, or nil if none found.
func (m *UpdateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductResponseMultiError(errors)
	}
	return nil
}

// UpdateProductResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductResponseMultiError) AllErrors() []error { return m }

// UpdateProductResponseValidationError is the validation error returned by
// UpdateProductResponse.Validate if the designated constraints aren't met.
type UpdateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductResponseValidationError) ErrorName() string {
	return "UpdateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductResponseValidationError{}

// Validate checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductRequestMultiError, or nil if none found.
func (m *DeleteProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProductId()); err != nil {
		err = DeleteProductRequestValidationError{
			field:  "ProductId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteProductRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteProductRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductRequestMultiError) AllErrors() []error { return m }

// DeleteProductRequestValidationError is the validation error returned by
// DeleteProductRequest.Validate if the designated constraints aren't met.
type DeleteProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductRequestValidationError) ErrorName() string {
	return "DeleteProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductRequestValidationError{}

// Validate checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductResponseMultiError, or nil if none found.
func (m *DeleteProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductResponseMultiError(errors)
	}
	return nil
}

// DeleteProductResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProductResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductResponseMultiError) AllErrors() []error { return m }

// DeleteProductResponseValidationError is the validation error returned by
// DeleteProductResponse.Validate if the designated constraints aren't met.
type DeleteProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductResponseValidationError) ErrorName() string {
	return "DeleteProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductResponseValidationError{}

// Validate checks the field values on LinkProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkProductCategoryRequestMultiError, or nil if none found.
func (m *LinkProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetProductId()); err != nil {
		err = LinkProductCategoryRequestValidationError{
			field:  "ProductId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCategoryId()); err != nil {
		err = LinkProductCategoryRequestValidationError{
			field:  "CategoryId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LinkProductCategoryRequestMultiError(errors)
	}
	return nil
}

func (m *LinkProductCategoryRequest) _validateUuid(uuid string) error {
	if matched := _menu_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LinkProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by LinkProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type LinkProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkProductCategoryRequestMultiError) AllErrors() []error { return m }

// LinkProductCategoryRequestValidationError is the validation error returned
// by LinkProductCategoryRequest.Validate if the designated constraints aren't met.
type LinkProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkProductCategoryRequestValidationError) ErrorName() string {
	return "LinkProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkProductCategoryRequestValidationError{}

// Validate checks the field values on LinkProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkProductCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkProductCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkProductCategoryResponseMultiError, or nil if none found.
func (m *LinkProductCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkProductCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LinkProductCategoryResponseMultiError(errors)
	}
	return nil
}

// LinkProductCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by LinkProductCategoryResponse.ValidateAll() if
// the designated constraints aren't met.
type LinkProductCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkProductCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkProductCategoryResponseMultiError) AllErrors() []error { return m }

// LinkProductCategoryResponseValidationError is the validation error returned
// by LinkProductCategoryResponse.Validate if the designated constraints
// aren't met.
type LinkProductCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkProductCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkProductCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkProductCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkProductCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkProductCategoryResponseValidationError) ErrorName() string {
	return "LinkProductCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkProductCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkProductCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkProductCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkProductCategoryResponseValidationError{}

// Validate checks the field values on CountriesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountriesRequestMultiError, or nil if none found.
func (m *CountriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountriesRequestMultiError(errors)
	}
	return nil
}

// CountriesRequestMultiError is an error wrapping multiple validation errors
// returned by CountriesRequest.ValidateAll() if the designated constraints
// aren't met.
type CountriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountriesRequestMultiError) AllErrors() []error { return m }

// CountriesRequestValidationError is the validation error returned by
// CountriesRequest.Validate if the designated constraints aren't met.
type CountriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountriesRequestValidationError) ErrorName() string { return "CountriesRequestValidationError" }

// Error satisfies the builtin error interface
func (e CountriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountriesRequestValidationError{}

// Validate checks the field values on CountriesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountriesResponseMultiError, or nil if none found.
func (m *CountriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCountries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CountriesResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CountriesResponseValidationError{
						field:  fmt.Sprintf("Countries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CountriesResponseValidationError{
					field:  fmt.Sprintf("Countries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CountriesResponseMultiError(errors)
	}
	return nil
}

// CountriesResponseMultiError is an error wrapping multiple validation errors
// returned by CountriesResponse.ValidateAll() if the designated constraints
// aren't met.
type CountriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountriesResponseMultiError) AllErrors() []error { return m }

// CountriesResponseValidationError is the validation error returned by
// CountriesResponse.Validate if the designated constraints aren't met.
type CountriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountriesResponseValidationError) ErrorName() string {
	return "CountriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountriesResponseValidationError{}

// Validate checks the field values on SetStatusMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStatusMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStatusMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStatusMessageRequestMultiError, or nil if none found.
func (m *SetStatusMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStatusMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Author

	if len(errors) > 0 {
		return SetStatusMessageRequestMultiError(errors)
	}
	return nil
}

// SetStatusMessageRequestMultiError is an error wrapping multiple validation
// errors returned by SetStatusMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type SetStatusMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStatusMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStatusMessageRequestMultiError) AllErrors() []error { return m }

// SetStatusMessageRequestValidationError is the validation error returned by
// SetStatusMessageRequest.Validate if the designated constraints aren't met.
type SetStatusMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStatusMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStatusMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStatusMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStatusMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStatusMessageRequestValidationError) ErrorName() string {
	return "SetStatusMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetStatusMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStatusMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStatusMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStatusMessageRequestValidationError{}

// Validate checks the field values on SetStatusMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetStatusMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStatusMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStatusMessageResponseMultiError, or nil if none found.
func (m *SetStatusMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStatusMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SetStatusMessageResponseMultiError(errors)
	}
	return nil
}

// SetStatusMessageResponseMultiError is an error wrapping multiple validation
// errors returned by SetStatusMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SetStatusMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStatusMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStatusMessageResponseMultiError) AllErrors() []error { return m }

// SetStatusMessageResponseValidationError is the validation error returned by
// SetStatusMessageResponse.Validate if the designated constraints aren't met.
type SetStatusMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStatusMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStatusMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStatusMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStatusMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStatusMessageResponseValidationError) ErrorName() string {
	return "SetStatusMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetStatusMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStatusMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStatusMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStatusMessageResponseValidationError{}
