/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.menu.v2.Menu');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.country.v2.Country');
goog.require('proto.image.v2.Image');
goog.require('proto.menu.v2.Status');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.menu.v2.Menu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.menu.v2.Menu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.menu.v2.Menu.displayName = 'proto.menu.v2.Menu';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.menu.v2.Menu.prototype.toObject = function(opt_includeInstance) {
  return proto.menu.v2.Menu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.menu.v2.Menu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.menu.v2.Menu.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownersMessage: (f = msg.getOwnersMessage()) && proto.menu.v2.Status.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.image.v2.Image.toObject(includeInstance, f),
    country: (f = msg.getCountry()) && proto.country.v2.Country.toObject(includeInstance, f),
    logo: (f = msg.getLogo()) && proto.image.v2.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.menu.v2.Menu}
 */
proto.menu.v2.Menu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.menu.v2.Menu;
  return proto.menu.v2.Menu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.menu.v2.Menu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.menu.v2.Menu}
 */
proto.menu.v2.Menu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = new proto.menu.v2.Status;
      reader.readMessage(value,proto.menu.v2.Status.deserializeBinaryFromReader);
      msg.setOwnersMessage(value);
      break;
    case 11:
      var value = new proto.image.v2.Image;
      reader.readMessage(value,proto.image.v2.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 12:
      var value = new proto.country.v2.Country;
      reader.readMessage(value,proto.country.v2.Country.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    case 13:
      var value = new proto.image.v2.Image;
      reader.readMessage(value,proto.image.v2.Image.deserializeBinaryFromReader);
      msg.setLogo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.menu.v2.Menu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.menu.v2.Menu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.menu.v2.Menu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.menu.v2.Menu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnersMessage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.menu.v2.Status.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.image.v2.Image.serializeBinaryToWriter
    );
  }
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.country.v2.Country.serializeBinaryToWriter
    );
  }
  f = message.getLogo();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.image.v2.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.menu.v2.Menu.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.menu.v2.Menu.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.menu.v2.Menu.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.menu.v2.Menu.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Status owners_message = 10;
 * @return {?proto.menu.v2.Status}
 */
proto.menu.v2.Menu.prototype.getOwnersMessage = function() {
  return /** @type{?proto.menu.v2.Status} */ (
    jspb.Message.getWrapperField(this, proto.menu.v2.Status, 10));
};


/** @param {?proto.menu.v2.Status|undefined} value */
proto.menu.v2.Menu.prototype.setOwnersMessage = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.menu.v2.Menu.prototype.clearOwnersMessage = function() {
  this.setOwnersMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.menu.v2.Menu.prototype.hasOwnersMessage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional image.v2.Image image = 11;
 * @return {?proto.image.v2.Image}
 */
proto.menu.v2.Menu.prototype.getImage = function() {
  return /** @type{?proto.image.v2.Image} */ (
    jspb.Message.getWrapperField(this, proto.image.v2.Image, 11));
};


/** @param {?proto.image.v2.Image|undefined} value */
proto.menu.v2.Menu.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.menu.v2.Menu.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.menu.v2.Menu.prototype.hasImage = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional country.v2.Country country = 12;
 * @return {?proto.country.v2.Country}
 */
proto.menu.v2.Menu.prototype.getCountry = function() {
  return /** @type{?proto.country.v2.Country} */ (
    jspb.Message.getWrapperField(this, proto.country.v2.Country, 12));
};


/** @param {?proto.country.v2.Country|undefined} value */
proto.menu.v2.Menu.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.menu.v2.Menu.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.menu.v2.Menu.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional image.v2.Image logo = 13;
 * @return {?proto.image.v2.Image}
 */
proto.menu.v2.Menu.prototype.getLogo = function() {
  return /** @type{?proto.image.v2.Image} */ (
    jspb.Message.getWrapperField(this, proto.image.v2.Image, 13));
};


/** @param {?proto.image.v2.Image|undefined} value */
proto.menu.v2.Menu.prototype.setLogo = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.menu.v2.Menu.prototype.clearLogo = function() {
  this.setLogo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.menu.v2.Menu.prototype.hasLogo = function() {
  return jspb.Message.getField(this, 13) != null;
};


